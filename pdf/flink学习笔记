http://shiyanjun.cn/archives/1508.html => Apache Flink：特性、概念、组件栈、架构及原理分析
https://zhuanlan.zhihu.com/p/22736103 => Flink源码解析-从API到JobGraph
https://www.jianshu.com/nb/28030243 => 丹之的flink专栏

通过System.out.println(env.getExecutionPlan())获取执行任务json串,通过访问
https://flink.apache.org/visualizer/查看可视化逻辑图

JobManager:
     Job Manager 是 Flink 集群的中控节点，类似于 Apache Storm 的 Nimbus 以及 Apache Spark 的 Driver 的角色。
它负责作业的调度、作业 Jar 包的管理、Checkpoint 的协调和发起、与 Task Manager 之间的心跳检查等工作。


TaskManager
    Task Manager 在 Flink 集群中也是一个个的进程实例，它的数量代表着能够运行作业个数的能力，所有的 Flink 作业最终其实是会在 Task Manager
上运行的，Task Manager 管理着运行在它上面的所有作业的 Task 的整个生命周期，包括了 Task 的启动销毁、内存管理、磁盘 IO、网络传输管理等。
    如果 TaskManager 有四个 Slot，那么它将为每个 Slot 分配 25％ 的内存。 可以在一个 Slot 中运行一个或多个线程。 同一 Slot 中的线程共享相同的 JVM。
同一 JVM 中的任务共享 TCP 连接和心跳消息。TaskManager 的一个 Slot 代表一个可用线程，该线程具有固定的内存，注意 Slot 只对内存隔离，没有对 CPU 隔离。
默认情况下，Flink 允许子任务共享 Slot，即使它们是不同 Task 的 subtask，只要它们来自相同的 Job，这种共享模式可以大大的提高资源利用率。
   Slot 是指 TaskManager 最大能并发执行的能力;parallelism 是指 TaskManager 实际使用的并发能力,如果设置程序的parallelism为1,那么
实际使用的slot只有1个,其他8个solt处于空闲状态

有状态计算以及幂等性
Flink 官网的定义是 Stateful Computations over Data Streams（数据流上的有状态计算），那到底什么是状态呢？举一个无状态计算的例子，比如：
我们只是进行一个字符串拼接，输入 a，输出a_666；输入b，输出 b_666。无状态表示计算输出的结果跟之前的状态没关系，符合幂等性。
幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生副作用。
而计算 PV、UV 就属于有状态计算。实时计算 PV 时，每次都需要从某个存储介质的结果表中拿到之前的 PV 值，+1 后 set 到结果表中。
有状态计算表示输出的结果跟之前的状态有关系，不符合幂等性，访问多次，PV 会增加。

public Transformation(String name, TypeInformation<T> outputType, int parallelism) {
    this.id = getNewNodeId();
    this.name = Preconditions.checkNotNull(name); => 操作算子名称
    this.outputType = outputType; => 操作算子输出类型
    this.parallelism = parallelism; => 操作算子并行度
    this.slotSharingGroup = null;
}

JobGraph是在StreamGraph的基础之上，对StreamNode进⾏行行了了关联合并的操作，
⽐比如对于source -> flatMap -> reduce -> sink 这样⼀一个数据处理理链，当source和
flatMap满⾜足链接的条件时，可以可以将两个操作符的操作放到⼀一个线程并⾏行行执⾏行行，
这样可以减少⽹网络中的数据传输，由于在source和flatMap之间的传输的数据也不不⽤用
序列列化和反序列列化，所以也提⾼高了了程序的执⾏行行效率

JobGraph是一个Job的用户逻辑视图表示，将一个用户要对数据流进行的处理表示为单个DAG图（对应于JobGraph），
DAG图由顶点（JobVertex）和中间结果集（IntermediateDataSet）组成，其中JobVertex表示了对数据流进行的转换操作，
比如map、flatMap、filter、keyBy等操作，而IntermediateDataSet是由上游的JobVertex所生成，同时作为下游的JobVertex的输入。
而ExecutionGraph是JobGraph的并行表示，也就是实际JobManager调度一个Job在TaskManager上运行的逻辑视图，它也是一个DAG图，
是由ExecutionJobVertex、IntermediateResult（或IntermediateResultPartition）组成，ExecutionJobVertex实际对应于
JobGraph图中的JobVertex，只不过在ExecutionJobVertex内部是一种并行表示，由多个并行的ExecutionVertex所组成。另外，
这里还有一个重要的概念，就是Execution，它是一个ExecutionVertex的一次运行Attempt，也就是说，一个ExecutionVertex可能对应
多个运行状态的Execution，比如，一个ExecutionVertex运行产生了一个失败的Execution，然后还会创建一个新的Execution来运行，
这时就对应这个2次运行Attempt。每个Execution通过ExecutionAttemptID来唯一标识，在TaskManager和JobManager之间进行Task状态
的交换都是通过ExecutionAttemptID来实现的。


class StreamingJobGraphGenerator
// 判断两个StreamNode是否能chain在一起
public static boolean isChainable(StreamEdge edge, StreamGraph streamGraph) {
    StreamNode upStreamVertex = streamGraph.getSourceVertex(edge);
    StreamNode downStreamVertex = streamGraph.getTargetVertex(edge);

    StreamOperatorFactory<?> headOperator = upStreamVertex.getOperatorFactory();
    StreamOperatorFactory<?> outOperator = downStreamVertex.getOperatorFactory();

    下游Edges的长度为1 ||  上下游操作不为空  ||  上下游算子的共享槽相同  || 下游的chain策略是always而上游的策略是always或者head
    edge的shuffle模式不是BATCH模式  ||  上下游的并行度数量相等  ||  streamGraph是可连接的
    return downStreamVertex.getInEdges().size() == 1
        && outOperator != null
        && headOperator != null
        && upStreamVertex.isSameSlotSharingGroup(downStreamVertex)
        && outOperator.getChainingStrategy() == ChainingStrategy.ALWAYS
        && (headOperator.getChainingStrategy() == ChainingStrategy.HEAD ||
        headOperator.getChainingStrategy() == ChainingStrategy.ALWAYS)
        && (edge.getPartitioner() instanceof ForwardPartitioner)
        && edge.getShuffleMode() != ShuffleMode.BATCH
        && upStreamVertex.getParallelism() == downStreamVertex.getParallelism()
        && streamGraph.isChainingEnabled();
}





